/** 
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */

options {
  static = true;
}

PARSER_BEGIN(AuthenticateIDPasswordTacticGrammaire)

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.Set;
import java.io.File;

public class AuthenticateIDPasswordTacticGrammaire
{
  public static Map<String, String> map = new HashMap();
  public static Map<String, String>  var = new HashMap();
  public static Token exceptionHandlingCallee;
  public static Map<String, String> tacticParticipatingObjects = new HashMap();
  public static int numberofChecks = 0;

  // Méthode pour obtenir le dernier fichier modifié dans un répertoire
  private static File getLatestFileFromDir(String dirPath) {
    File dir = new File(dirPath);
    File[] files = dir.listFiles();
    if (files == null || files.length == 0) {
      return null;
    }

    File lastModifiedFile = files[0];
    for (int i = 1; i < files.length; i++) {
      if (files[i].lastModified() > lastModifiedFile.lastModified()) {
        lastModifiedFile = files[i];
      }
    }
    return lastModifiedFile;
  }

  public static void main(String args []) throws ParseException
  {
    try {
      // Chemin vers le dossier uploads
      //String uploadsDirPath = "JAvatest/uploads";
      String uploadsDirPath = System.getProperty("user.dir") + File.separator + "uploads";


      File latestFile = getLatestFileFromDir(uploadsDirPath);
      
      if (latestFile == null) {
        System.out.println("Aucun fichier trouvé dans le dossier uploads");
        return;
      }
      
      System.out.println("Analyse du fichier: " + latestFile.getName());
      AuthenticateIDPasswordTacticGrammaire parser = 
          new AuthenticateIDPasswordTacticGrammaire(new java.io.FileInputStream(latestFile));
      try {
        parser.AuthenticateIDPassword();
      	System.out.println("Number of checks: " + numberofChecks);
        if(!tacticParticipatingObjects.isEmpty()) { 
          Set keys = tacticParticipatingObjects.keySet();
          Iterator it = keys.iterator();

          for(String key : tacticParticipatingObjects.keySet()) {
            String value = tacticParticipatingObjects.get(key);
          }

        }

      } catch (Exception e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }

    } catch(Exception e) { 
      e.printStackTrace();
    }
  }
}

// ... [le reste du code reste inchangé] ...
PARSER_END(AuthenticateIDPasswordTacticGrammaire)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN : {< LITERAL : (["a"-"z", "A"-"Z"])+ >}
TOKEN : {< OBJ : (["a"-"z"])+ >}
TOKEN : {< Method_Signature: "~"(["a"-"z"])+ >}
TOKEN : {< OBJJ : (["a"-"z"])+ >}
TOKEN : {< CALLER :"CALLER:">}
TOKEN : {< CALLEE :"CALLEE:">}
TOKEN : {< METHOD :"METHOD:">}
TOKEN : {< COMMA :",">}
TOKEN : {< COMMAP :";">}

void AuthenticateIDPassword(): { }
{
  A()
  B()
  C()
}

void A(): { Token caller, callee; }
{

  <CALLER>
  caller = <LITERAL> { map.put("caller", caller.image); }

  <COMMA> M()
  callee = <LITERAL> { map.put("callee", callee.image); }

  <COMMAP>
  {
    

    if (map.get("caller").equals(map.get("callee"))) {
      return;
    } else {
      C(); 
    }
  }
}

void B(): { Token caller, callee,Addclr, Addcle; }
{
  

  LOOKAHEAD({getToken(2).image.equals(map.get("callee"))})
  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }
    { var.put("Addclr", caller.image); }
    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }
    { var.put("Addcle", callee.image); }

    <COMMAP>
   
{
  
      if (caller.image.equals(callee.image)) {
       
        B();
      } else {
        E(); 
       
      }
    }
  )
  | { C(); }
}

void E(): { Token caller, callee; }
{
  LOOKAHEAD({getToken(2).image.equals(map.get("callee"))})


  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }

    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }

    <COMMAP>
    {
      if (map.get("caller").equals(map.get("callee"))) {
        F();
        return;
      } else {
        C(); 
      }
    }
  )
  | 
    C()
}

void F(): { Token caller, callee; }
{
  LOOKAHEAD({getToken(2).image.equals(map.get("callee"))})

  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }

    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }

    <COMMAP>
    {
      if (map.get("caller").equals(map.get("callee"))) {
        System.out.println("____________________________________________________________________________");
        System.out.println("La tactique correspondante se trouve dans la ligne  " +( caller.beginLine - 3) );
         for (int i = 3; i >= 0; i--) {
    		System.out.println("Recursive call detected in E() at line " + (caller.beginLine - i));
		   }
        System.out.println("La tactique prend fin ligne dans la ligne " + caller.beginLine );
		    System.out.println("Objets participants a la tactique :");
		    System.out.println( "Objet 1  -> " + var.get("Addclr"));
		    System.out.println( "Objet 2  -> " + var.get("Addcle"));
        tacticParticipatingObjects.put("callee ", callee.image);
        tacticParticipatingObjects.put("caller ", caller.image);

        numberofChecks++;
        return;
      } else {
        E(); 
      }
    }
  )
  | 
    C()
}

void C(): { Token caller, callee; }
{


  (
    A() B() C()
  ) ?

}


void M(): {}
{
  <METHOD> <LITERAL> <COMMA> <CALLEE>
}
