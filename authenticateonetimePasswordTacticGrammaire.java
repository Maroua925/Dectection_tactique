/* Generated By:JavaCC: Do not edit this line. authenticateonetimePasswordTacticGrammaire.java */
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.Set;
import java.io.File;

public class authenticateonetimePasswordTacticGrammaire implements authenticateonetimePasswordTacticGrammaireConstants {
  public static Map<String, String> map = new HashMap<String, String>();
  public static Map<String, String> var = new HashMap<String, String>();
  public static Token exceptionHandlingCallee;
  public static Map<String, String> tacticParticipatingObjects = new HashMap<String, String>();
  public static int numberofChecks = 0;

  public static File getLatestFileFromDir(String dirPath) {
    File dir = new File(dirPath);
    File[] files = dir.listFiles();
    if (files == null || files.length == 0) {
      return null;
    }

    File lastModifiedFile = files[0];
    for (int i = 1; i < files.length; i++) {
      if (files[i].lastModified() > lastModifiedFile.lastModified()) {
        lastModifiedFile = files[i];
      }
    }
    return lastModifiedFile;
  }

  public static void main(String args[]) throws ParseException {
    try {
      // Chemin vers le dossier uploads - Ã  adapter selon votre configuration
      String uploadsDirPath = System.getProperty("user.dir") + File.separator + "uploads";
      File latestFile = getLatestFileFromDir(uploadsDirPath);

      if (latestFile == null) {
        System.out.println("Aucun fichier trouv\u00e9 dans le dossier uploads");
        return;
      }

      System.out.println("Utilisation du fichier: " + latestFile.getName());
      authenticateonetimePasswordTacticGrammaire parser =
          new authenticateonetimePasswordTacticGrammaire(new java.io.FileInputStream(latestFile));
      try {
        parser.authenticateonetimePassword();
        System.out.println("Number of checks: "+numberofChecks);
        if(!tacticParticipatingObjects.isEmpty()) {
          Set<String> keys = tacticParticipatingObjects.keySet();
          Iterator<String> it = keys.iterator();
          for(String key : tacticParticipatingObjects.keySet()) {
            String value = tacticParticipatingObjects.get(key);

          }
        }
      } catch (Exception e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    } catch(Exception e) {
      e.printStackTrace();
    }
  }

  static final public void authenticateonetimePassword() throws ParseException {
    A();
    C();
  }

  static final public void A() throws ParseException {
            Token caller, callee, Addclr, Addcle;
    jj_consume_token(CALLER);
    caller = jj_consume_token(LITERAL);
                       map.put("caller", caller.image);
    var.put("Addclr", caller.image);
    jj_consume_token(COMMA);
    M();
    callee = jj_consume_token(LITERAL);
                       map.put("callee", callee.image);
    var.put("Addcle", callee.image);
    jj_consume_token(COMMAP);
    if (map.get("caller").equals(map.get("callee"))) {
      C();
    }
    else {
      B();
      {if (true) return;}
    }
  }

  static final public void B() throws ParseException {
            Token caller, callee;
    if (getToken(2).image.equals(map.get("callee"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (caller.image.equals(callee.image)) {
        E();
      }
      else {
        { var.put("Addclr", caller.image); }
        { var.put("Addcle", callee.image); B(); }
      }
    } else {
      C();
    }
  }

  static final public void E() throws ParseException {
            Token caller, callee;
    if (getToken(2).image.equals(map.get("callee"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (map.get("callee").equals(var.get("Addclr"))) {
        alt();
        {if (true) return;}
      }
      else {
        if (map.get("callee").equals(map.get("caller"))) {
          C();
        }
        else {
          { var.put("Addclr", caller.image); }
          { var.put("Addcle", callee.image); B(); }
        }
      }
    } else {
      C();
    }
  }

  static final public void alt() throws ParseException {
              Token caller, callee;
    if ((getToken(2).image.equals(var.get("Addcle"))) || (getToken(2).image.equals(var.get("Addclr")))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (map.get("caller").equals(map.get("callee"))) {
        g();
        {if (true) return;}
      }
      else {
        { var.put("Addclr", caller.image); }
        { var.put("Addcle", callee.image); B(); }
      }
    } else {
      C();
    }
  }

  static final public void g() throws ParseException {
            Token caller, callee, Addclr, Addcle;
    if (getToken(2).image.equals(var.get("Addclr")) && getToken(8).image.equals(var.get("Addcle"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (map.get("callee").equals(var.get("Addcle"))) {
        k();
        {if (true) return;}
      }
      else {
        if (map.get("callee").equals(map.get("caller"))) {
          C();
        }
        else {
          { var.put("Addclr", caller.image); }
          { var.put("Addcle", callee.image); B(); }
        }
      }
    } else {
      C();
    }
  }

  static final public void k() throws ParseException {
            Token caller, callee;
    if (getToken(2).image.equals(map.get("callee"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (map.get("caller").equals(map.get("callee"))) {
        System.out.println("____________________________________________________________________________");
        System.out.println("La tactique correspondante se trouve dans la ligne  " +( caller.beginLine - 5) );
       for (int i = 5; i >= 0; i--) {
                System.out.println("Recursive call detected in E() at line " + (caller.beginLine - i));
                   }
       System.out.println("La tactique prend fin dans la ligne  " + caller.beginLine  );
                System.out.println("Objets participants a la tactique :");
                System.out.println( "Objet 1  -> " + var.get("Addclr"));
                System.out.println( "Objet 2  -> " + var.get("Addcle"));
        tacticParticipatingObjects.put("callee in E", callee.image);
        tacticParticipatingObjects.put("caller in E", caller.image);
        numberofChecks++;
        {if (true) return;}
      }
      else {
        { var.put("Addclr", caller.image); }
        { var.put("Addcle", callee.image); B(); }
      }
    } else {
      C();
    }
  }

  static final public void C() throws ParseException {
            Token caller, callee;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLER:
      A();
      B();
      C();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void M() throws ParseException {
    jj_consume_token(METHOD);
    jj_consume_token(LITERAL);
    jj_consume_token(COMMA);
    jj_consume_token(CALLEE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public authenticateonetimePasswordTacticGrammaireTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,};
   }

  /** Constructor with InputStream. */
  public authenticateonetimePasswordTacticGrammaire(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public authenticateonetimePasswordTacticGrammaire(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new authenticateonetimePasswordTacticGrammaireTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public authenticateonetimePasswordTacticGrammaire(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new authenticateonetimePasswordTacticGrammaireTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public authenticateonetimePasswordTacticGrammaire(authenticateonetimePasswordTacticGrammaireTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(authenticateonetimePasswordTacticGrammaireTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
