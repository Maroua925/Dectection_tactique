/* Generated By:JavaCC: Do not edit this line. MaintainMultipleCopieTacticGrammaire.java */
import java.util.ArrayList;

import java.util.HashMap;

import java.util.Map;

import java.util.Iterator;

import java.util.Set;

import java.io.File;

import java.io.FileInputStream;



public class MaintainMultipleCopieTacticGrammaire implements MaintainMultipleCopieTacticGrammaireConstants {

  public static Map<String, String> map = new HashMap<String, String>();

  public static Map<String, String> temp = new HashMap<String, String>();

  public static Map<String, String> var = new HashMap<String, String>();

  public static Map<String, String> tempvr = new HashMap<String, String>();



  public static Token exceptionHandlingCallee;

  public static Map<String, String> tacticParticipatingObjects = new HashMap<String, String>();

  public static int numberofChecks = 0;

   public static int line = 0;



  // Méthode pour obtenir le fichier le plus récent dans un dossier

  private static File getLatestFile(String dirPath) {

    File dir = new File(dirPath);

    File[] files = dir.listFiles();

    if (files == null || files.length == 0) {

      return null;

    }



    File lastModifiedFile = files[0];

    for (int i = 1; i < files.length; i++) {

      if (files[i].lastModified() > lastModifiedFile.lastModified()) {

        lastModifiedFile = files[i];

      }

    }

    return lastModifiedFile;

  }



  public static void main(String args[]) throws ParseException {

    try {

      // Chemin vers le dossier uploads - à adapter

       String uploadsDirPath = System.getProperty("user.dir") + File.separator + "uploads";

      File latestFile = getLatestFile(uploadsDirPath);



      if (latestFile == null) {

        System.out.println("Aucun fichier trouv\u00e9 dans le dossier uploads");

        return;

      }



      System.out.println("Analyse du fichier: " + latestFile.getName());

      MaintainMultipleCopieTacticGrammaire parser =

          new MaintainMultipleCopieTacticGrammaire(new FileInputStream(latestFile));



      try {

        parser.MaintainMultipleCopie();

        System.out.println("Number of checks: " + numberofChecks);

      } catch (Exception e) {

        System.out.println("Erreur lors de l'analyse:");

        e.printStackTrace();

      }

    } catch(Exception e) {

      System.out.println("Erreur d'initialisation:");

      e.printStackTrace();

    }

  }

  static final public void MaintainMultipleCopie() throws ParseException {
    A();
    C();
  }

  static final public void A() throws ParseException {
            Token caller,tempvar , callee, Addclr, Addcle;
    jj_consume_token(CALLER);
    caller = jj_consume_token(LITERAL);
                       map.put("caller", caller.image);
    jj_consume_token(COMMA);
    M();
    callee = jj_consume_token(LITERAL);
                       map.put("callee", callee.image);
    var.put("Addclr", callee.image);
    jj_consume_token(COMMAP);
     temp.put("tempvar", caller.image);

     tempvr.put("caller", caller.image);

    if (map.get("caller").equals(map.get("callee"))) {

      C();

    }

    else {

      B();

      {if (true) return;}

    }
  }

  static final public void B() throws ParseException {
            Token caller, callee;
    if (getToken(2).image.equals(map.get("callee"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
      jj_consume_token(COMMAP);
      if ((caller.image.equals(callee.image))|| callee.image.equals(map.get("caller"))) {

        C();

      }

      else {

        System.out.println("____________________________________________________________________________");

        System.out.println("La tactique correspondante se trouve dans la ligne " + ( caller.beginLine - 1) );

        for (int i = 1; i >= 0; i--) {

          System.out.println("Recursive call detected in E() at line " + (caller.beginLine - i));

        }

        line= caller.beginLine;

        tacticParticipatingObjects.put("callee in E", callee.image);

        tacticParticipatingObjects.put("caller in E", caller.image);

        numberofChecks++;

        System.out.println("Objets participants a la tactique: ");

        System.out.println("Objet 1  -> "+tempvr.get("caller"));

        System.out.println("Objet 2  -> "+caller);

        System.out.println("Objet 3  -> "+callee);

        var.put("Addcle", callee.image);

        D();

      }
      map.put("caller", caller.image);
      map.put("callee", callee.image);
    } else {
      C();
    }
  }

  static final public void D() throws ParseException {
            Token caller, tempvar, callee;
    if (getToken(2).image.equals(var.get("Addclr"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (map.get("callee").equals(map.get("caller"))) {

        System.out.println("La tactique prend fin dans la ligne " + line );

        C();

        {if (true) return;}

      }

      else {

        if (map.get("callee").equals(var.get("Addcle")) || map.get("callee").equals(temp.get("tempvar"))) {

          System.out.println("La tactique prend fin dans la ligne " + line );

          var.put("Addclr", callee.image);

          tempvr.put("caller", caller.image);

          B();

        }

        else {

          tempvr.put("callee", callee.image);

          G();

        }

      }
    } else {
    System.out.println("La tactique prend fin dans la ligne " + line );var.put("Addclr", getToken(8).image);tempvr.put("caller", getToken(2).image);B();
    }
  }

  static final public void G() throws ParseException {
            Token caller, callee;
    if (getToken(2).image.equals(var.get("Addclr"))) {
      jj_consume_token(CALLER);
      caller = jj_consume_token(LITERAL);
                         map.put("caller", caller.image);
      jj_consume_token(COMMA);
      M();
      callee = jj_consume_token(LITERAL);
                         map.put("callee", callee.image);
      jj_consume_token(COMMAP);
      if (!(map.get("callee").equals(var.get("Addcle")))) {

        if (map.get("callee").equals(map.get("caller"))) {

          System.out.println("La tactique prend fin dans la ligne " + line );

          C();

        }

        else {

          System.out.println("La tactique prend fin dans la ligne " + line );

          { var.put("Addclr", caller.image); }

          {tempvr.put("caller", caller.image);}
          var.put("Addcle", callee.image);

          B();

        }

      }
      if ((map.get("callee").equals(var.get("Addcle")))) {

        for (int i = 1; i >= 0; i--) {

          System.out.println("Recursive call detected in E() at line " + (caller.beginLine - i));

        }

        System.out.println("Objet 4 -> "+tempvr.get("callee"));

        System.out.println("Cette tactique inclut un bloc optionnel.");

        System.out.println("La tactique prend fin dans la ligne " + caller.beginLine );

      }
    } else {
    System.out.println("La tactique prend fin dans la ligne " + line );var.put("Addclr", getToken(8).image);B();
    }
  }

  static final public void C() throws ParseException {
            Token caller, callee;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CALLER:
      A();
      C();
      break;
    default:
      jj_la1[0] = jj_gen;
      ;
    }
  }

  static final public void M() throws ParseException {
    jj_consume_token(METHOD);
    jj_consume_token(LITERAL);
    jj_consume_token(COMMA);
    jj_consume_token(CALLEE);
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public MaintainMultipleCopieTacticGrammaireTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[1];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x200,};
   }

  /** Constructor with InputStream. */
  public MaintainMultipleCopieTacticGrammaire(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public MaintainMultipleCopieTacticGrammaire(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new MaintainMultipleCopieTacticGrammaireTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public MaintainMultipleCopieTacticGrammaire(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new MaintainMultipleCopieTacticGrammaireTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public MaintainMultipleCopieTacticGrammaire(MaintainMultipleCopieTacticGrammaireTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(MaintainMultipleCopieTacticGrammaireTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 1; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List jj_expentries = new java.util.ArrayList();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[14];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 1; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 14; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = (int[])jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
