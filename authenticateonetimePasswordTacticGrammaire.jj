options {
  static = true;
}

PARSER_BEGIN(authenticateonetimePasswordTacticGrammaire)

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.Iterator;
import java.util.Set;
import java.io.File;

public class authenticateonetimePasswordTacticGrammaire {
  public static Map<String, String> map = new HashMap<String, String>();
  public static Map<String, String> var = new HashMap<String, String>();
  public static Token exceptionHandlingCallee;
  public static Map<String, String> tacticParticipatingObjects = new HashMap<String, String>();
  public static int numberofChecks = 0;

  public static File getLatestFileFromDir(String dirPath) {
    File dir = new File(dirPath);
    File[] files = dir.listFiles();
    if (files == null || files.length == 0) {
      return null;
    }

    File lastModifiedFile = files[0];
    for (int i = 1; i < files.length; i++) {
      if (files[i].lastModified() > lastModifiedFile.lastModified()) {
        lastModifiedFile = files[i];
      }
    }
    return lastModifiedFile;
  }

  public static void main(String args[]) throws ParseException {
    try {
      // Chemin vers le dossier uploads - à adapter selon votre configuration
      String uploadsDirPath = System.getProperty("user.dir") + File.separator + "uploads";
      File latestFile = getLatestFileFromDir(uploadsDirPath);
      
      if (latestFile == null) {
        System.out.println("Aucun fichier trouvé dans le dossier uploads");
        return;
      }
      
      System.out.println("Utilisation du fichier: " + latestFile.getName());
      authenticateonetimePasswordTacticGrammaire parser = 
          new authenticateonetimePasswordTacticGrammaire(new java.io.FileInputStream(latestFile));
      try {
        parser.authenticateonetimePassword();
        System.out.println("Number of checks: "+numberofChecks);
        if(!tacticParticipatingObjects.isEmpty()) {
          Set<String> keys = tacticParticipatingObjects.keySet();
          Iterator<String> it = keys.iterator();
          for(String key : tacticParticipatingObjects.keySet()) {
            String value = tacticParticipatingObjects.get(key);

          }
        }
      } catch (Exception e) {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        e.printStackTrace();
      }
    } catch(Exception e) { 
      e.printStackTrace();
    }
  }
}

PARSER_END(authenticateonetimePasswordTacticGrammaire)




SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN : {< LITERAL : (["a"-"z", "A"-"Z"])+ >}
TOKEN : {< OBJ : (["a"-"z"])+ >}
TOKEN : {< Method_Signature: "~"(["a"-"z"])+ > }
TOKEN : {< OBJJ : (["a"-"z"])+ >}
TOKEN : {< CALLER :"CALLER:">}
TOKEN : {< CALLEE :"CALLEE:">}
TOKEN : {< METHOD :"METHOD:">}
TOKEN : {< COMMA :",">}
TOKEN : {< COMMAP :";">}


void authenticateonetimePassword(): {}
{
  A() C()
}


void A(): { Token caller, callee, Addclr, Addcle; }
{
  <CALLER>
  caller = <LITERAL> { map.put("caller", caller.image); }
  { var.put("Addclr", caller.image); }
  <COMMA> M()
  callee = <LITERAL> { map.put("callee", callee.image); }
  { var.put("Addcle", callee.image); }
  <COMMAP>
  {
   
    if (map.get("caller").equals(map.get("callee"))) {
      C(); 
    }
    else {
      B(); 
      return;
    }
  }
}



void B(): { Token caller, callee; }
{
  LOOKAHEAD({getToken(2).image.equals(map.get("callee"))})
  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }
    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }
    <COMMAP>
    {
      if (caller.image.equals(callee.image)) {
        E();
      }
      else {
        { var.put("Addclr", caller.image); }
        { var.put("Addcle", callee.image); B(); }
      }
    }
  )
  | { C(); }
}



void E(): { Token caller, callee; }
{
  LOOKAHEAD({getToken(2).image.equals(map.get("callee"))})
  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }
    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }
    <COMMAP>
    {
      if (map.get("callee").equals(var.get("Addclr"))) {
        alt();
        return;
      }
      else {
        if (map.get("callee").equals(map.get("caller"))) {
          C();
        } 
        else {
          { var.put("Addclr", caller.image); }
          { var.put("Addcle", callee.image); B(); }
        }
      }
    }
  )
  | 
  C()
}



void alt(): { Token caller, callee; }
{
  LOOKAHEAD({(getToken(2).image.equals(var.get("Addcle"))) || (getToken(2).image.equals(var.get("Addclr"))) })
  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }
    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }
    <COMMAP>
    {
      if (map.get("caller").equals(map.get("callee"))) {
        g();
        return;
      }
      else {
        { var.put("Addclr", caller.image); }
        { var.put("Addcle", callee.image); B(); }
      }
    }
  )
  | C()
}

void g(): { Token caller, callee, Addclr, Addcle; }
{
  LOOKAHEAD({getToken(2).image.equals(var.get("Addclr")) && getToken(8).image.equals(var.get("Addcle")) })
  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }
    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }
    <COMMAP>
    {
      if (map.get("callee").equals(var.get("Addcle"))) {
        k();
        return;
      }
      else {
        if (map.get("callee").equals(map.get("caller"))) {
          C();
        } 
        else {
          { var.put("Addclr", caller.image); }
          { var.put("Addcle", callee.image); B(); }
        }
      }
    }
  )
  | C()
}



void k(): { Token caller, callee; }
{
  LOOKAHEAD({getToken(2).image.equals(map.get("callee"))})
  (
    <CALLER>
    caller = <LITERAL> { map.put("caller", caller.image); }
    <COMMA> M()
    callee = <LITERAL> { map.put("callee", callee.image); }
    <COMMAP>
    {
      if (map.get("caller").equals(map.get("callee"))) {
        System.out.println("____________________________________________________________________________");
        System.out.println("La tactique correspondante se trouve dans la ligne  " +( caller.beginLine - 5) );
       for (int i = 5; i >= 0; i--) {
    		System.out.println("Recursive call detected in E() at line " + (caller.beginLine - i));
		   }
       System.out.println("La tactique prend fin dans la ligne  " + caller.beginLine  );
		System.out.println("Objets participants a la tactique :");
		System.out.println( "Objet 1  -> " + var.get("Addclr"));
		System.out.println( "Objet 2  -> " + var.get("Addcle"));
        tacticParticipatingObjects.put("callee in E", callee.image);
        tacticParticipatingObjects.put("caller in E", caller.image);
        numberofChecks++;
        return;
      }
      else {
        { var.put("Addclr", caller.image); }
        { var.put("Addcle", callee.image); B(); }
      }
    }
  )
  |  C()
}



void C(): { Token caller, callee; }
{
  (
    A() B() C()
  )?
}





void M(): {}
{
  <METHOD> <LITERAL> <COMMA> <CALLEE>
}